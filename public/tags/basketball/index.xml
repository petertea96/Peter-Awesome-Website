<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basketball | Peter Tea</title>
    <link>/tags/basketball/</link>
      <atom:link href="/tags/basketball/index.xml" rel="self" type="application/rss+xml" />
    <description>Basketball</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020</copyright><lastBuildDate>Tue, 21 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Basketball</title>
      <link>/tags/basketball/</link>
    </image>
    
    <item>
      <title>Principal Component Analysis on All-NBA</title>
      <link>/project/all-nba-pca/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/project/all-nba-pca/</guid>
      <description>


&lt;div id=&#34;all-nba-team&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;All-NBA Team&lt;/h2&gt;
&lt;p&gt;The All-NBA award is an interesting way we keep track of the best stars in the game. Voted on by reporters and members of the media, 15 players are chosen at the end of each season to occupy 3 All-NBA teams. 6 Guards, 6 Forwards and 3 Centers place high up in the clouds and marked as the best among their peers.&lt;/p&gt;
&lt;p&gt;Outside of being the top 15 players, what are the defining features of an All-NBA player? What do players have to accomplish in order to be considered for this prestigious award? Is there anything that separates a player on the 1st All-NBA team from a player on the 2nd or 3rd All-NBA teams? Have there been any egregious snubs for this award in the past? To answer these pressing questions, we first turn to Principal Component Analysis for guidance on distinguishing general patterns among All-NBA players.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;table-of-contents&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Table of contents&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#pca&#34;&gt;Principal Component Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#per_100_poss&#34;&gt;Data: Per 100 Possessions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vision&#34;&gt;PCA Visualizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Closing Remarks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;principal-component-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Principal Component Analysis &lt;a name=&#34;pca&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Among many potential capabilities, principal component analysis (PCA) can be used as a simple visualization tool when we have a myriad of continuous features to consider. In our case, we have several recognizable box score metrics like points scored, rebounds and assists standardized on a per 100 possessions rate that we’ll explore.&lt;/p&gt;
&lt;p&gt;PCA is an unsupervised algorithm that is able to summarize a set of correlated, continuous variables into a lower-dimensional representation that is easier to visualize. In some sense, we are compressing the data into a compact form that hopefully captures most of the variability in the data. With PCA, we’ll investigate which combination of features best explain the variability of NBA player performances across different seasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;per-100-possessions-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Per 100 Possessions Data &lt;a name=&#34;per_100_poss&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While most box-score metrics are available at the end of each season on a per game basis (ex: Points per game), using a per game standard makes it challenging to compare performances of players under different team styles of basketball. For example, recently we’ve seen an emphasis on up-tempo and spread out offence largely popularized by coach Mike D’Antoni. The modern NBA offence has seen an explosion in the volume of shots taken each game, especially beyond the arc. Pace of play is much faster now than what it was even 10 years ago, making it extremely difficult to also compare players from different eras.&lt;/p&gt;
&lt;p&gt;One stat that might allow us to better compare players under different offence styles is the per 100 possessions metric. This metric standardizes each player’s opportunity to fill the stat sheet, by exactly measuring how well players perform per 100 possessions rather than by game. Here, players who stuff the stat sheet with fewer opportunities will now appear more favourable than players who had more opportunities to accumulate box-scores.&lt;/p&gt;
&lt;p&gt;We obtain per 100 possessions data through Basketball Reference, with the help of the &lt;code&gt;bball&lt;/code&gt; R package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-preparation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Preparation&lt;/h3&gt;
&lt;p&gt;Since the inception of 3 separate All-NBA teams started in 1989, we begin collecting data from 1989 until the past 2019 season. The nomination of All-NBA teams started well before 1989, however only included 2 All-NBA teams.&lt;/p&gt;
&lt;p&gt;To remove as much noise and outliers as possible, we’ve decided to only include players that satisfy the following two conditions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Played in at least 10 games&lt;/li&gt;
&lt;li&gt;Averaged at least 15 minutes played per game&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Applying the above two filters reduced the size of the data from 12913 to 9126 observations. In total, we chose to look at 25 continuous features.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pca-visualizations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;PCA Visualizations &lt;a name=&#34;vision&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After standardizing each feature to have a mean of 0 and standard deviation of 1, we then apply the PCA algorithm through the &lt;code&gt;Scikit-learn&lt;/code&gt; library in Python. We will first focus on visualization across the first 2 principal components, as it is easier to represent data in 2-D.&lt;/p&gt;
&lt;p&gt;Each &lt;code&gt;principal component&lt;/code&gt; is simply a normalized linear combination of the 25 features, found by maximizing a variance objective function. Subsequent principal components are found with the added constraint that they are orthogonal to the previous principal components. &lt;code&gt;Loadings&lt;/code&gt; are the weights for each of the 25 features relative to a principal component.&lt;/p&gt;
&lt;p&gt;With a PC Loadings plot of the first and second principal components, we depict the directions in feature space along which the data vary the most. Each loadings vector shows the relative importance/weight that both principal components place on the 25 features.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;allnba_loadingsplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From this loadings plot, we see that Principal Component 1 (PC1) places its highest weights on rebounds, blocks, and field goal percentages (i.e. highest loading values along the x-axis). Hence, players with high PC1 scores might roughly correspond to players who can crash and bang in the paint, grab rebounds, alter shots at the rim and maybe even show some nice efficiency in finishing easy buckets near the rim. Interestingly, features with highly negative weights along this principal component include 3 pointers made and attempted, steals and assists which all summarize typical characteristics among traditional Guards (i.e. perimeter players).&lt;/p&gt;
&lt;p&gt;Similarly, we see that Principal Component 2 (PC2) places its highest weights on points, field goals, field goal attempts and free throws made (i.e. highest values along the y-axis). We shouldn’t be too surprised to see all four of these variables located closely to one another since they are somewhat all correlated. Eventually as players take more and more shots, this will increase the number of field goals made which in turn will increase the number of points scored for that player. Players with high PC2 scores might correspond to players vying for scoring titles.&lt;/p&gt;
&lt;p&gt;How do the players, and more importantly the all-NBA players, fit along this 2-D representation?
For each of the n=9126 observations, we plot the &lt;code&gt;scores&lt;/code&gt; of the first principal component along the x-axis, and the scores of the second principal component along the y-axis.&lt;/p&gt;
&lt;p&gt;Let’s first take a look at the scores for guards.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;guards_biplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we see a clear distinction of players who make All-NBA compared to those who don’t. While the majority of guards tend to have negative scores along the PC1 axis, about half of the All-NBA guards have highly positive PC1 scores. This might indicate that having higher versatility, that is the ability to not only facilitate plays but also score and grab rebounds, might lead to an All-NBA player. Of course, we do see a sizeable amount of guards placed near the direction favouring steals and assists so having higher versatility is certainly not a necessary condition for a guard to be All-NBA. Surprisingly, there does not appear to be an obvious pattern of players on 1st team All-NBA compared to the 2nd and 3rd teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;forward_biplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Moving onto Forwards, we see that most forwards seem to fit anywhere on this plot. However, majority Forwards who end up making All-NBA are found in the upper right quadrant with high PC1 and PC2 scores. In fact, it seems like having higher scores on both these axes is related to Forwards on the 1st All-NBA team. We see a bit more disparity of the 3 All-NBA teams on this plot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;center_biplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Lastly for centers we see that they are placed mostly on the right side of this biplot. This is intuitive since most centers are not adept in steals, assists or 3 pointers (ahem Tragic Johnson alert). Most All-NBA players have positive PC2 scores, especially centers who make the 1st All-NBA team. Centers tend to grab more rebounds and block more shots, so it is not a surprise to see their scores be far along the right of the x-axis.&lt;/p&gt;
&lt;p&gt;So far, we’ve only considered a two-dimensional representation of the p-dimensional data for simplicity. However, does 2 dimensions successfully capture the major patterns in the data? How much information is lost by projecting the observations onto only the first two principal components? That is, how much of the variance in the data is not contained in the first few principal components? To answer these important questions, we present a scree plot which depicts the proportion of variance explained by each of the principal components.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;allnba_screeplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the first principal component explains about 28 % of the variance in the data, and the second principal component explains 24 % of the variance. Together, the first two principal components explain almost 52 % of the variance in the data; just over half of the entire variance.
The third principal component accounts for under 10 % of the variance, while the remaining principal components each slightly hover above or are below 5 % of the total variance.&lt;/p&gt;
&lt;p&gt;While the first two dimensions does miss out on a sizeable amount of variance, it does still provide an okay summary of the data. The convenience of plotting in only two dimensions is of course why we focussed merely on 2 principal components. The 3rd principal component explains less than half of either of the first two principal components, so it was not worthwhile to pursue an added layer of dimensionality with so little upside.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;closing-remarks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Closing Remarks &lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, what have we learned from looking at these plots? Essentially, Forwards and Centers who get more rebounds, blocks, points and field goal makes are more likely to be All-NBA caliber players. Furthermore, extra versatility for guards might make them All-NBA bound, but guards that excel under a traditional guard role can still vie for the all-NBA. In other words, the Earth is round, rain makes roads wet and Kawhi is still on load management. So much for making deep impressions on the game of basketball. While this isn’t ground-breaking results, it is still interesting to visualize specifically the tendencies of All-NBA players.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Appendix&lt;/h3&gt;
&lt;p&gt;Biplots combine both loading and score plots in a single display. They might be easier to analyse since everything is on a single plot, but I find them to be a bit clunky especially with many features plotted.
&lt;img src=&#34;allnba_biplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To visualize relationships between continuous features, it might be appealing to look at pairwise correlation plots. The issue though is that with many continuous features included, these plots can get overloaded and difficult to visualize. In this project we only had 25 features to consider, which isn’t too bad.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;corr_plot.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2020 MIT Sloan Sports Analytics Conference Hackathon</title>
      <link>/project/ssac_2020/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/project/ssac_2020/</guid>
      <description>


&lt;div id=&#34;mit-ssac&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2020 MIT SSAC&lt;/h2&gt;
&lt;p&gt;For the 2020 MIT SSAC Hackathon, participants were given access to tracking data for 8 NCAA basketball games. My group and I decided to look into how shot release angles, shot release velocities and shot distance from the hoop affect the probability of a player making a shot. While we did run out of time, the ultimate goal was then to observe how player fatigue impact these variables (eg: how does shot release angle and velocity change when players are tired - and how much could this impact the probability that players make shots?).&lt;/p&gt;
&lt;p&gt;Here is a link to the &lt;a href=&#34;https://docs.google.com/presentation/d/1j1k1EK6CP4E8CbRU3Xr8OuSUySRzWh9An_79K0GIUog/present?usp=sharing&#34;&gt;slides&lt;/a&gt; used for our presentation!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using GAMs to predict 2020 All-NBA Team</title>
      <link>/project/all-nba/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/project/all-nba/</guid>
      <description>


&lt;div id=&#34;all-nba-selection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;All-NBA Selection&lt;/h1&gt;
&lt;div id=&#34;table-of-contents&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Table of contents&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction: All-NBA Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;Obtaining/Scraping Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#EDA&#34;&gt;Exploratory Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gam&#34;&gt;Fitting GAM Model&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;all-nba-selection-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;All-NBA Selection &lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The All-NBA team is an annual NBA distinction awarded to players with outstanding peformances at the end of each NBA season. Since the 1989 season, the All-NBA team is composed of three sub All-NBA teams (i.e. 1st All-NBA, 2nd All-NBA and 3rd All-NBA) where each team is composed of 2 guards, 2 forwards and 1 center. In total, 6 guards, 6 forwards and 3 centers are selected for the All-NBA team.&lt;/p&gt;
&lt;p&gt;Selection is controlled by a panel of sportswriters and broadcasters (i.e. the media) who select players for the All-NBA 1st, 2nd and 3rd Teams by position. A tally of all the votes are then taken to determine the results of All-NBA selections for all three teams. Players placed on a 1st All-NBA team ballot are awarded 5 points, while players placed on a 2nd All-NBA team ballot are awarded 3 points and 1 point for a 3rd All-NBA team ballot. The implications of the All-NBA team are not only of financial incentive, but also for reputation as inclusion to this team might validate the stardom of NBA players.&lt;/p&gt;
&lt;p&gt;In this project, we build models to predict which players will form all 3 All-NBA teams. We first collect end-of-season boxscore statistics since the 1989 NBA season to train and test our prediction models. Then, we make our predictions for the All-NBA team for this current 2020 NBA season. We decided to look at statistics on a &lt;em&gt;per 100 possessions&lt;/em&gt; metric to account for fluctuating pace of play across different NBA seasons.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;obtainingscraping-nba-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obtaining/Scraping NBA Data &lt;a name=&#34;data&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We first scrape historic end-of-season boxscore statistics for NBA players using the &lt;a href=&#34;https://rdrr.io/github/bobbyingram/bballR/&#34;&gt;&lt;code&gt;bballR&lt;/code&gt;&lt;/a&gt; R package. As stated previously, we are interested in box-score metrics on a &lt;em&gt;per 100 possessions&lt;/em&gt; scale, which the bballR R package can easily provide.&lt;/p&gt;
&lt;div id=&#34;player-per-100-possessions-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1989 - 2019 Player per 100 possessions Data&lt;/h3&gt;
&lt;p&gt;We first present code on collecting end-of season box-score statistics (&lt;em&gt;per 100 possessions&lt;/em&gt;), and saving them into &lt;code&gt;.RDS&lt;/code&gt; files using the bballR R package. We decide to only keep player seaason records where the player played at least 100 minutes. We add in this criterion since having players who play limited minutes are likely not going to be considered for the All-NBA teams.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;##### --------------- Using bballR package to scrape historical data --------------- #####

setwd(&amp;quot;~/Documents/Sports-Analytics/NBA/Data&amp;quot;)
# --&amp;gt; Set current working directory to where we want to save data

# Use the bballR package to gather some end of season boxscore stats
#install.packages(&amp;quot;remotes&amp;quot;)
#remotes::install_github(&amp;quot;bobbyingram/bballR&amp;quot;)

# --&amp;gt; Load all libraries we will need
library(bballR)


# --&amp;gt; First scrape key data outlining info on all NBA players (this may help with merging datasets later on)
players_dat &amp;lt;- bballR::scrape_all_players()

# --&amp;gt; Save file
saveRDS(players_dat, file = &amp;quot;players_dat.RDS&amp;quot;)
# Data Key: https://rdrr.io/github/bobbyingram/bballR/man/scrape_all_players.html


# --&amp;gt; Second, scrape end of season boxscore statistics (per 100 possessions) from the 1989 season to the previous 2019 NBA season.

for (year in 1989:2019){
  filename = paste(&amp;quot;NBA_&amp;quot;, year, &amp;quot;_P100P.RDS&amp;quot;, sep = &amp;quot;&amp;quot; )
  saveRDS(bballR::scrape_season_per_100_poss(year), file = filename)
}
#https://rdrr.io/github/bobbyingram/bballR/man/scrape_season_per_100_poss.html


# --&amp;gt; Combine all seasons into a single &amp;quot;master file&amp;quot;
# --&amp;gt; Only include players who played more than 100 minutes a season
Historical_dat_1989_2019 &amp;lt;- data.frame()
for( year in 1990:2019){
  dat &amp;lt;- readRDS(paste(&amp;quot;NBA_&amp;quot;, year, &amp;quot;_P100P.RDS&amp;quot;, sep = &amp;quot;&amp;quot; ))
  
  dat &amp;lt;- dat %&amp;gt;%
    filter(MP &amp;gt; 100) %&amp;gt;% 
    filter(Tm != &amp;quot;TOT&amp;quot;) %&amp;gt;%
    mutate(Year = year)
  
  Historical_dat_1989_2019 &amp;lt;- rbind(Historical_dat_1989_2019, dat)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;all-nba-player-selections&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1989 - 2019 All-NBA Player Selections&lt;/h3&gt;
&lt;p&gt;The previous code saved each season’s per 100 possesion box-score statistics in separate .RDS files. Now, we will need to scrape data that indicates which players won All-NBA team awards at the end of each season. Unfortunately, the bballR R package does not include functions that scrape this type of information for us. Instead, we will scrape this information ourselves.&lt;/p&gt;
&lt;p&gt;A list of All-NBA teams can be found on &lt;a href=&#34;https://www.basketball-reference.com/awards/all_league.html&#34;&gt;basketball-reference&lt;/a&gt;. We will use the &lt;code&gt;rVest&lt;/code&gt; R package to scrape this data into a clean .RDS file as shown in the code below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ----- Get list of player names who made the ALL - NBA Teams ----- #
library(rvest)
library(dplyr)

my_url &amp;lt;- read_html(&amp;quot;https://www.basketball-reference.com/awards/all_league.html&amp;quot;)
node &amp;lt;- &amp;quot;tbody .left , .right&amp;quot;
# Node found using InspectorGadget chrome tool.

scraped_data &amp;lt;- my_url %&amp;gt;%
  html_nodes(node) %&amp;gt;%
  html_text()

dummy&amp;lt;- scraped_data[1:984]
# Anything past the 984th element of the list is not required

# Remove empty elements from the list
to_remove &amp;lt;- c()
for (i in seq(from=25, to = 953, by = 32)){
  ind &amp;lt;- seq(from = i, to = i+7, by = 1)
  to_remove &amp;lt;- c(to_remove, ind)
}

dummy &amp;lt;- dummy[-to_remove]

# Remove entries that indicate type of All-NBA team awarded
to_remove2 &amp;lt;- which(grepl(&amp;quot;0|1|2|3|NBA&amp;quot;, dummy))
players &amp;lt;- dummy[-to_remove2]


# Initialize data frame...
year &amp;lt;- rep(2019:1989, each = 15)
team &amp;lt;- rep(rep(1:3, each = 5), times = 31)


ALL_NBA_data &amp;lt;- data.frame(Year = year, Team = team, Player = players, stringsAsFactors = F) %&amp;gt;%
  mutate(Position = substr(Player, start = nchar(Player), stop = nchar(Player)),
         Player = substr(Player, 1, nchar(Player) - 2)
         ) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have collected historic box-score statistics after each NBA season, and also collected the names of the players who won All-NBA after those seasons, the next step is to combine these two datasets together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an ID that will match the box-score dataset
to_test &amp;lt;- paste(ALL_NBA_data$Player, ALL_NBA_data$Year, sep =&amp;quot;-&amp;quot;)

# Add column of 1 if player made All-NBA that season, and 0 if they did not.
# Also, adjust position to be G, F or C.
Historical_dat_1989_2019 &amp;lt;- Historical_dat_1989_2019 %&amp;gt;%
  mutate(ID = paste(Player, Year, sep = &amp;quot;-&amp;quot;),
         ALL_NBA = ifelse(ID %in% to_test, 1, 0),
         New_Pos = ifelse(&amp;quot;G&amp;quot; == substr(Pos,2,2), &amp;quot;G&amp;quot;, ifelse(&amp;quot;F&amp;quot; == substr(Pos,2,2), &amp;quot;F&amp;quot;, &amp;quot;C&amp;quot;) ))

#Historical_dat_1989_2019 %&amp;gt;% group_by(Year) %&amp;gt;%
#  summarise(n = sum(ALL_NBA)) %&amp;gt;% View()
# --&amp;gt; Two years have &amp;quot;16&amp;quot; players winning All-NBA
# --&amp;gt; This is just one player being traded during season (playing for two different teams)

saveRDS(Historical_dat_1989_2019, file = &amp;quot;Historical_dat_1989_2019.RDS&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;current-2020-player-per-100-possessions-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Current 2020 Player per 100 possessions Data&lt;/h3&gt;
&lt;p&gt;Later on in our report, we will predict who will be included in this year’s All-NBA team. To do this, we will need to scrape the current season box-score statistics (per 100 possessions). Again, we will use basketball-reference and the R package &lt;code&gt;rVest&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;##### ----- Get current per 100 possession season stats ----- #####
my_url &amp;lt;- read_html(&amp;quot;https://www.basketball-reference.com/leagues/NBA_2020_per_poss.html&amp;quot;)

node &amp;lt;- &amp;quot;.left , .right , .center&amp;quot;


scraped_data &amp;lt;- my_url %&amp;gt;%
  html_nodes(node) %&amp;gt;%
  html_text()

# Remove the &amp;quot;Rk&amp;quot; column from data
#Rk_ind &amp;lt;- which(scraped_data == &amp;quot;Rk&amp;quot;)[-1]


each_row &amp;lt;- seq(from = 33, to = length(scraped_data) - 32,  by = 32)
col_names = scraped_data[1:32]

dat = matrix(ncol = 32)
for (i in each_row){
  dat &amp;lt;- rbind(dat, scraped_data[i:(i+31)])
  
}

colnames(dat) &amp;lt;- col_names

Current_season_dat &amp;lt;- as.data.frame(dat, stringsAsFactors = FALSE)
Current_season_dat &amp;lt;- Current_season_dat[-which(Current_season_dat$Rk == &amp;quot;Rk&amp;quot;), ]


Current_season_dat[c(4, 6:32)] &amp;lt;- sapply(Current_season_dat[c(4, 6:32)], as.numeric)

Current_season_dat &amp;lt;- Current_season_dat[-1, -30]

saveRDS(Current_season_dat, file = &amp;quot;~/Documents/Sports-Analytics/NBA/Data/Current_season_dat.RDS&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploratory Data Analysis &lt;a name=&#34;EDA&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After all that heavy lifting, we now present some basic exploratory data analysis on our collected data. For the purposes of this project, we decided to focus only on players who have played at least 100 minutes in a given season. This condition removes players who are not full-time NBA players and hence better represents a sample of NBA players who are more inclined to be selected for the All-NBA teams.&lt;/p&gt;
&lt;p&gt;We first present a simple correlation plot between 14 different boxscore metrics for these NBA players. These metrics include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PTS: Points scored per 100 possessions&lt;/li&gt;
&lt;li&gt;AST: Assists per 100 possessions&lt;/li&gt;
&lt;li&gt;STL: Steals per 100 possessions&lt;/li&gt;
&lt;li&gt;BLK: Blocks per 100 possessions&lt;/li&gt;
&lt;li&gt;MP: Minutes played&lt;/li&gt;
&lt;li&gt;ORB: Offensive rebounds per 100 possessions&lt;/li&gt;
&lt;li&gt;DRB: Defensive rebounds per 100 possessions&lt;/li&gt;
&lt;li&gt;TOV: Turnovers per 100 possessions&lt;/li&gt;
&lt;li&gt;PF: Personal fouls per 100 possessions&lt;/li&gt;
&lt;li&gt;ORtg: Offensive rating (An estimate of points produced per 100 possessions)&lt;/li&gt;
&lt;li&gt;DRtg: Defensive rating (An estimate of points allowed per 100 possessions)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###########
# --&amp;gt; Exploratory correlation plot b/n variables
library(ggcorrplot)
library(dplyr)

corr_mat &amp;lt;- Historical_dat_1990_2019 %&amp;gt;%
  select(PTS, AST, STL, BLK, MP, ORB, DRB, TOV, PF, ORtg, DRtg) %&amp;gt;%
  cor() %&amp;gt;%
  round(1)


ggcorrplot(corr_mat, type = &amp;quot;lower&amp;quot;, colors = c(&amp;quot;#FF0000&amp;quot;, &amp;quot;#FFFFF0&amp;quot; , &amp;quot;#4169E1&amp;quot;),
           outline.col = &amp;quot;black&amp;quot;, lab = T, ggtheme = theme_classic(),
           title = &amp;quot;Correlation of per 100 possession boxscore stats&amp;quot;,
           legend.title = &amp;quot;Correlation&amp;quot;,
           lab_size = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/project/All-NBA/index_files/figure-html/EDA-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From the correlation plot above, we see that there exists strong linear relationships between a player’s Offensive Rebounding numbers with their Defensive Rebounding numbers and number of Blocks. This is unsurprising since players who grab rebounds and block shots tend to be near the rim, and hence will have a tendency to perform both roles of grabbing rebounds and blocking shots. Turnovers and assists also tend to be related as well since decision makers whose job is to set up their teamates through assists, may be more liable to turn the ball over as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-gam-models&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fitting GAM Models &lt;a name=&#34;GAM&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To predict whether a player will be selected or not for an All-NBA team, we use GAM models. In the context of our problem, a GLM (i.e. logistic regression) could be used to estimate the log odds (a function of a success probability) of a player reaching All-NBA status, given his in season performance. However, GLM models assume a linear relationship (i.e. a parametric form) between the covariates and the log-odds of All-NBA selection which may not be true. GAM models on the other hand do not assume a priori any specific structure for the relationship between boxscore stats and the outcome of All-NBA selection. In fact, GAMs can be used to model non-linear effects of the covariates on the response variable. In a sense, we can consider GAM models as a more flexible version of GLM models. GAMs have the abililty to model these non-linear relationships using spline functions. More information on GAMs can be found &lt;a href=&#34;https://christophm.github.io/interpretable-ml-book/extend-lm.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;!--
Since the relationship between our proposed covariates and the outcome of All-NBA selection may be different based on position (eg: Assists and steals may be more important for Guards, while blocks and rebounds may be more important for Centers), we fit 3 seperate GAM models for the Guard, Forward and Center positions.
--&gt;
&lt;p&gt;To further reduce noise, we also only chose to look at player season records where the player played atleast 5 games (in addition to playing at least 100 total minutes). The rationale is that players who do not meet the above criteria are likely not considered from All-NBA selection.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Historical_dat_1990_2019 &amp;lt;- Historical_dat_1990_2019 %&amp;gt;%
  filter(G &amp;gt; 5 &amp;amp; MP &amp;gt; 100)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up, we’ll set up our training and testing sets to inform us on the quality of the fit of our models. We chose the conventional 70 % split for the training set and 30 % to the test set. To ensure that there are an adequate amount of outcomes in each of the training and test sets, we allocate total years to each set. That is, since we have a total of 31 years, we allocate 0.3 x 30 = &lt;strong&gt;9 years&lt;/strong&gt; of data to the testing set and the remaining &lt;strong&gt;22 years&lt;/strong&gt; of data to the training set.&lt;/p&gt;
&lt;p&gt;To evaluate the predictive performances of our GAM models, we look at their classification rates on the testing set. Here, in our calculations for classification rates, we will only consider the amount of correct All-NBA predictions. That is, among the players who actually won All-NBA, how many did we correctly predict that they would win. A classification rate that considers correct classification among those who did not win All-NBA would not be very informative since the majority of players do not win All-NBA.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create Training (70%) - Testing (30%) split
# In total, we have 30 years of data.
# --&amp;gt; Training set will have 21 years worth of data, Testing set will have 9 years worth of data 

set.seed(824)
# --&amp;gt; RIP Kobe and Gianna Bryant

# Randomly select 9 years:
possible_years &amp;lt;- 1990:2019

test_years &amp;lt;- sort(sample(x=possible_years, size = 9))

train_years &amp;lt;- sort(possible_years[is.na(pmatch(possible_years, test_years))])


train_dat &amp;lt;- Historical_dat_1990_2019 %&amp;gt;%
  filter(Year %in% train_years) %&amp;gt;%
  select(New_Pos, PTS, AST, STL, BLK, MP, ORB, DRB, TOV, PF, ORtg, DRtg, FT, FG, FGA, Year,
         Player, ALL_NBA)

test_dat &amp;lt;- Historical_dat_1990_2019 %&amp;gt;%
  filter(Year %in% test_years)  %&amp;gt;%
  select(New_Pos, PTS, AST, STL, BLK, MP, ORB, DRB, TOV, PF, ORtg, DRtg, FT, FG, FGA, Year,
         Player, ALL_NBA)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;gam-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;GAM Model&lt;/h3&gt;
&lt;p&gt;Here is the fitting of a GAM model to our training set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mgcv)

gen_mod =  gam(ALL_NBA ~ s(PTS) + s(AST) + s(STL) + s(BLK) + s(MP) + 
                 s(ORB) + s(DRB) + s(TOV) + s(PF) + s(ORtg) + s(DRtg) + 
                 s(FT) + s(FG) + s(FGA) + New_Pos,
               data = train_dat,
               family = binomial,
               method = &amp;quot;REML&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(gen_mod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Family: binomial 
## Link function: logit 
## 
## Formula:
## ALL_NBA ~ s(PTS) + s(AST) + s(STL) + s(BLK) + s(MP) + s(ORB) + 
##     s(DRB) + s(TOV) + s(PF) + s(ORtg) + s(DRtg) + s(FT) + s(FG) + 
##     s(FGA) + New_Pos
## 
## Parametric coefficients:
##             Estimate Std. Error z value Pr(&amp;gt;|z|)    
## (Intercept) -11.1535     0.7598 -14.679   &amp;lt;2e-16 ***
## New_PosF     -0.2974     0.4063  -0.732   0.4643    
## New_PosG     -1.2459     0.6069  -2.053   0.0401 *  
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Approximate significance of smooth terms:
##           edf Ref.df Chi.sq  p-value    
## s(PTS)  1.000  1.001  7.245  0.00713 ** 
## s(AST)  1.535  1.913 24.477 4.54e-05 ***
## s(STL)  3.018  3.744  7.469  0.09130 .  
## s(BLK)  1.000  1.000  0.318  0.57274    
## s(MP)   1.150  1.284 92.432  &amp;lt; 2e-16 ***
## s(ORB)  1.000  1.000  2.993  0.08364 .  
## s(DRB)  4.690  5.756 12.732  0.02963 *  
## s(TOV)  1.000  1.000  0.015  0.90325    
## s(PF)   1.000  1.000 15.933 6.56e-05 ***
## s(ORtg) 1.000  1.000  5.875  0.01536 *  
## s(DRtg) 1.398  1.709 94.097  &amp;lt; 2e-16 ***
## s(FT)   2.993  3.777  9.284  0.03331 *  
## s(FG)   4.296  5.246 16.078  0.00838 ** 
## s(FGA)  2.676  3.457  5.696  0.16203    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## R-sq.(adj) =  0.703   Deviance explained = 78.4%
## -REML = 331.67  Scale est. = 1         n = 9289&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The summary of our fitted Guards GAM model is shown below. To inspect the degree of &lt;code&gt;wiggliness&lt;/code&gt; in our fitted model, we look at the edf (estimated degrees of freedom). Terms with edf values equal to 1 represent fitted splines which are linear; edf values equal to 2 represent fitted splines which are quadratic; larger edf values represent splines that are increasingly non-linear (i.e. higher EDF value implies more complex splines). In our model, the 5 statistically significant covariates (at level 5%) all have edf &amp;gt; 1.&lt;/p&gt;
&lt;p&gt;From the summary of this GAM model, we see that &lt;code&gt;Assists&lt;/code&gt; &lt;code&gt;Minutes&lt;/code&gt; and &lt;code&gt;Defensive Rating&lt;/code&gt; were the strongest influencers on whether a player was awarded All-NBA. Additionally, 78.4 % of the deviance was explained by this model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluating-gam-model-performance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluating GAM Model Performance&lt;/h2&gt;
&lt;p&gt;Using our fitted model, we now predict how well it classifies All-NBA selection in our testing set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predicted_probs &amp;lt;- predict(gen_mod, test_dat, type = &amp;quot;response&amp;quot;)  

Results_dat &amp;lt;- cbind(test_dat, predicted_probs)

correct_G_vector &amp;lt;- vector()
for(year in test_years){
  how_many &amp;lt;- Results_dat %&amp;gt;%
    filter(Year == year &amp;amp; New_Pos == &amp;quot;G&amp;quot;) %&amp;gt;%
    arrange(desc(predicted_probs)) %&amp;gt;%
    select(ALL_NBA) %&amp;gt;%
    head(6) %&amp;gt;%
    sum()
  
  correct_G_vector &amp;lt;- append(correct_G_vector, how_many)
}
names(correct_G_vector) &amp;lt;- test_years
#correct_G_vector

correct_vector_F &amp;lt;- vector()
for(year in test_years){
  how_many &amp;lt;- Results_dat %&amp;gt;%
    filter(Year == year &amp;amp; New_Pos == &amp;quot;F&amp;quot;) %&amp;gt;%
    arrange(desc(predicted_probs)) %&amp;gt;%
    select(ALL_NBA) %&amp;gt;%
    head(6) %&amp;gt;%
    sum()
  
  correct_vector_F &amp;lt;- append(correct_vector_F, how_many)
}
names(correct_vector_F) &amp;lt;- test_years
#correct_vector_F


correct_vector_C &amp;lt;- vector()
for(year in test_years){
  how_many &amp;lt;- Results_dat %&amp;gt;%
    filter(Year == year &amp;amp; New_Pos == &amp;quot;C&amp;quot;) %&amp;gt;%
    arrange(desc(predicted_probs)) %&amp;gt;%
    select(ALL_NBA) %&amp;gt;%
    head(3) %&amp;gt;%
    sum()
  
  correct_vector_C &amp;lt;- append(correct_vector_C, how_many)
}
names(correct_vector_C) &amp;lt;- test_years
#correct_vector_C&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;guards-result&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Guards Result&lt;/h3&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:Guards&#34;&gt;Table 1: &lt;/span&gt;Classification Rate of Guards&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;1990&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1993&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1994&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1996&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1999&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2000&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2002&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2005&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2010&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--
Testing set Year |1990 | 1993 | 1994 | 1996 | 1999 | 2000 | 2002 | 2005 | 2010 | 
|---|---|---|---|---|---|---|---|---|---|
No. correct classifications |  5   | 4   | 3 |   4   | 4 |   5 |   5 |   4 |   4 |
--&gt;
&lt;p&gt;In the above table 1, we present the number of correct players classified into the All-NBA team. Note that each year, 6 guards are chosen for All- NBA. The results indicate an overall classification rate of 70 % in the testing dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;forwards-result&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Forwards Result&lt;/h3&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:Forwards&#34;&gt;Table 2: &lt;/span&gt;Classification Rate of Forwards&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;1990&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1993&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1994&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1996&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1999&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2000&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2002&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2005&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2010&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--
Testing set Year |1990 | 1993 | 1994 | 1996 | 1999 | 2000 | 2002 | 2005 | 2010 | 
|---|---|---|---|---|---|---|---|---|---|
No. correct classifications |  4   | 6   | 4 |   5   | 4 |   6 |   3 |   5 |   5 |
--&gt;
&lt;p&gt;In the above table 2, we present the number of correct players classified into the All-NBA team. Note that each year, 6 forwardss are chosen for All- NBA. The results indicate an overall classification rate of 76 % in the testing dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;centers-result&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Centers Result&lt;/h3&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:Centers&#34;&gt;Table 3: &lt;/span&gt;Classification Rate of Centers&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;1990&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1993&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1994&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1996&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1999&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2000&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2002&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2005&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2010&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--
Testing set Year |1990 | 1993 | 1994 | 1996 | 1999 | 2000 | 2002 | 2005 | 2010 | 
|---|---|---|---|---|---|---|---|---|---|
No. correct classifications |  3   | 3   | 3 |   2   | 1 |   3 |   3 |   2 |   3 |
--&gt;
&lt;p&gt;In the above table 3, we present the number of correct players classified into the All-NBA team. Note that each year, 3 centers are chosen for All- NBA. The results indicate an overall classification rate of 89 % in the testing dataset.&lt;/p&gt;
&lt;p&gt;Overall, we have correctly classified the recipients of the All-NBA section 80 % of the time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;whos-taking-the-all-nba-this-year&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Who’s taking the All-NBA this year?&lt;/h2&gt;
&lt;p&gt;Given the results, we present the following 1st, 2nd and 3rd All-NBA-Teams:&lt;/p&gt;
&lt;div id=&#34;all-nba-1st-team&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;All-NBA 1st Team&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Player&lt;/th&gt;
&lt;th&gt;Position&lt;/th&gt;
&lt;th&gt;Probability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Luka Dončić&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;96 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;James Harden&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;85 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Giannis Antetokounmpo&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;100 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;*LeBron James&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;97 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Anthony Davis&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;87 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;all-nba-2nd-team&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;All-NBA 2nd Team&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Player&lt;/th&gt;
&lt;th&gt;Position&lt;/th&gt;
&lt;th&gt;Probability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Damian Lillard&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;55 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Trae Young&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;36 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Kawhi Leonard&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;89 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Khris Middleton&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;17 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Nikola Jokic&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;64 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;all-nba-3rd-team&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;All-NBA 3rd Team&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Player&lt;/th&gt;
&lt;th&gt;Position&lt;/th&gt;
&lt;th&gt;Probability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;**Bradley Beal&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;11 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Russell Westbrook&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;5 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Jimmy Butler&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;6 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Jayson Tatum&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;6 %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Joel Embiid&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;19 %&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;*While Lebron was coded as a &lt;code&gt;Guard&lt;/code&gt;, we will treat him as a Forward in our projections.&lt;/p&gt;
&lt;p&gt;**We note that Kyrie Irving was actually given the 5th highest fitted value among guards (15 % chance of All-NBA Selection). However, due to his season-ending shoulder-injury, it is unlikely that he would be considered for this award by the end of the season.&lt;/p&gt;
&lt;p&gt;Notable Omissions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Guards: Devin Booker (5 %), Zach Lavine (4 %), Donovan Mitchell (3 %), Kemba Walker (2 %), Chris Paul (2 %), Ben Simmons ( &amp;lt; 1 %)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forwards: Bam Adebayo (3 %), Pascal Siakam (2 %), Paul George (2 %), Demar Derozan (1 %)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Centers: Karl-Anthony Towns (13 %)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are there any major snubs from the model? While Devin Booker has put up some stellar numbers (34.2 PTS / 8.6 AST / 5.5 REBS per 100 Possessions), and Chris Paul’s OKC Thunder are surprising everybody out west (currently 5th place with a 40-24 record), it’s tough to exclude any of the guards from the list. Interestingly enough, of the players predicted to win an All-NBA selection, only 1 did not make this year’s All-Star Team (&lt;code&gt;Bradley Beal&lt;/code&gt;). Speaking of the All-Star Team, which All-Stars did not get a nod for the All-NBA teams? Among the starters, we are missing: Pascal Siakam and Kemba Walker. Among the reserves, we are missing: Kyle Lowry, Ben Simmons, Bam Adebayo, Domantas Sabonis, Chris Paul, Donovan Mitchell, Brandom Ingram, Rudy Gobert, and Devin Booker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scraping data from Basketball-Reference with Selector Gadget</title>
      <link>/post/scraping-basketball-reference/</link>
      <pubDate>Thu, 19 Dec 2019 13:00:00 +0000</pubDate>
      <guid>/post/scraping-basketball-reference/</guid>
      <description>


&lt;div id=&#34;lets-ball&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Let’s Ball&lt;/h1&gt;
&lt;p&gt;As a fan of the &lt;strong&gt;NBA&lt;/strong&gt; and an enthusiastic &lt;strong&gt;R&lt;/strong&gt; user, I’ve spent some time scouring the internet for ways to obtain useable data to load into R - mainly from the popular data source &lt;a href=&#34;https://www.basketball-reference.com&#34;&gt;Basketball-Reference&lt;/a&gt;. Unsatisfied with my online data quest, I just decided to scrape the data on &lt;a href=&#34;https://www.basketball-reference.com&#34;&gt;Basketball-Reference&lt;/a&gt; myself! The process is pretty straightforward, as you will see shortly…&lt;/p&gt;
&lt;div id=&#34;working-with-raw-data-html-and-selectorgadget&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working with Raw Data: HTML and SelectorGadget&lt;/h2&gt;
&lt;p&gt;Firstly, as the entire contents of a &lt;a href=&#34;https://www.basketball-reference.com&#34;&gt;Basketball-Reference&lt;/a&gt;
web page is written in HTML format, you can easily save the entire content and load it into R. However, it simplifies things greatly if we can be more selective in the contents we want to load into R. HTML files contain &lt;code&gt;tags&lt;/code&gt; that pretty much denotes different content of the HTML page. If you can find the speficic tag for the table you want to save in R, then you’re golden! Take for example this &lt;a href=&#34;https://www.basketball-reference.com/leagues/NBA_2020_per_minute.html&#34;&gt;table&lt;/a&gt; that shows the latest (as of December 2nd, 2019) player boxscore stats per 36 minutes.:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;bbref.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How can we extract only the information found in the above table? To do that, we can simply use a chrome tool called &lt;a href=&#34;https://chrome.google.com/webstore/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb?hl=en&#34;&gt;SelectorGadget&lt;/a&gt;. By using this plug-in, we can simply highlight the specific content of the page we want saved, and export it into R. For those unfamiliar with selectorgadget, I’d refer them to &lt;a href=&#34;https://www.youtube.com/watch?v=oqNTfWrGdbk&#34;&gt;this helpful video&lt;/a&gt;. Below is a screenshot of my selectorgadget screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;selector_gadget.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You’ll note that the plug-in produces a &lt;code&gt;node&lt;/code&gt; as we select elements of the html page (this will be useful in our R code). Make sure to only highlight elements of the table and nothing else on the page!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-data-into-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading data into R&lt;/h2&gt;
&lt;p&gt;First, let’s load in two R packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rvest:&lt;/li&gt;
&lt;li&gt;dplyr:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;rvest&amp;quot;)
library(rvest)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we read in our dataset by specifying the &lt;code&gt;url&lt;/code&gt; and the &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_url &amp;lt;- read_html(&amp;quot;https://www.basketball-reference.com/leagues/NBA_2020_per_minute.html&amp;quot;)
node &amp;lt;- &amp;quot;.left , .center , .right&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the first 29 elements of our compiled data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scraped_data &amp;lt;- my_url %&amp;gt;%
  html_nodes(node) %&amp;gt;%
  html_text()

my_variable_names &amp;lt;- scraped_data[1:29]

print(my_variable_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Rk&amp;quot;     &amp;quot;Player&amp;quot; &amp;quot;Pos&amp;quot;    &amp;quot;Age&amp;quot;    &amp;quot;Tm&amp;quot;     &amp;quot;G&amp;quot;      &amp;quot;GS&amp;quot;     &amp;quot;MP&amp;quot;    
##  [9] &amp;quot;FG&amp;quot;     &amp;quot;FGA&amp;quot;    &amp;quot;FG%&amp;quot;    &amp;quot;3P&amp;quot;     &amp;quot;3PA&amp;quot;    &amp;quot;3P%&amp;quot;    &amp;quot;2P&amp;quot;     &amp;quot;2PA&amp;quot;   
## [17] &amp;quot;2P%&amp;quot;    &amp;quot;FT&amp;quot;     &amp;quot;FTA&amp;quot;    &amp;quot;FT%&amp;quot;    &amp;quot;ORB&amp;quot;    &amp;quot;DRB&amp;quot;    &amp;quot;TRB&amp;quot;    &amp;quot;AST&amp;quot;   
## [25] &amp;quot;STL&amp;quot;    &amp;quot;BLK&amp;quot;    &amp;quot;TOV&amp;quot;    &amp;quot;PF&amp;quot;     &amp;quot;PTS&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These names match exactly the first 29 elements of the table we want to extract.&lt;/p&gt;
&lt;p&gt;Just as an FYI, the data is saved as a &lt;code&gt;vector&lt;/code&gt; in R, with &lt;code&gt;13,922&lt;/code&gt; entries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is.vector(scraped_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(scraped_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14270&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div id=&#34;data-cleaning-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Cleaning in R&lt;/h2&gt;
&lt;p&gt;Some of the variable names begin with numbers which is a huge &lt;strong&gt;no-no&lt;/strong&gt; in R, so let’s manually change these names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_variable_names[12:17] &amp;lt;- c(&amp;quot;Threes_made&amp;quot;, &amp;quot;Threes_attempted&amp;quot;,
                              &amp;quot;Threes_percent&amp;quot;, &amp;quot;Twos_made&amp;quot;,
                              &amp;quot;Twos_attempted&amp;quot;, &amp;quot;Twos_percent&amp;quot;)

print(my_variable_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Rk&amp;quot;               &amp;quot;Player&amp;quot;           &amp;quot;Pos&amp;quot;              &amp;quot;Age&amp;quot;             
##  [5] &amp;quot;Tm&amp;quot;               &amp;quot;G&amp;quot;                &amp;quot;GS&amp;quot;               &amp;quot;MP&amp;quot;              
##  [9] &amp;quot;FG&amp;quot;               &amp;quot;FGA&amp;quot;              &amp;quot;FG%&amp;quot;              &amp;quot;Threes_made&amp;quot;     
## [13] &amp;quot;Threes_attempted&amp;quot; &amp;quot;Threes_percent&amp;quot;   &amp;quot;Twos_made&amp;quot;        &amp;quot;Twos_attempted&amp;quot;  
## [17] &amp;quot;Twos_percent&amp;quot;     &amp;quot;FT&amp;quot;               &amp;quot;FTA&amp;quot;              &amp;quot;FT%&amp;quot;             
## [21] &amp;quot;ORB&amp;quot;              &amp;quot;DRB&amp;quot;              &amp;quot;TRB&amp;quot;              &amp;quot;AST&amp;quot;             
## [25] &amp;quot;STL&amp;quot;              &amp;quot;BLK&amp;quot;              &amp;quot;TOV&amp;quot;              &amp;quot;PF&amp;quot;              
## [29] &amp;quot;PTS&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use this vector data to fill in an empty table we create in R. We have to note though, that due to the way we’ve scraped the data there exists some garbage we must remove. If you look carefully, the table repeats the variable names after every 20th player.
I’ll illustrate below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scraped_data[582: 660]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Dwayne Bacon&amp;quot;  &amp;quot;SG&amp;quot;            &amp;quot;24&amp;quot;            &amp;quot;CHO&amp;quot;          
##  [5] &amp;quot;23&amp;quot;            &amp;quot;10&amp;quot;            &amp;quot;401&amp;quot;           &amp;quot;4.5&amp;quot;          
##  [9] &amp;quot;14.3&amp;quot;          &amp;quot;.314&amp;quot;          &amp;quot;0.9&amp;quot;           &amp;quot;4.0&amp;quot;          
## [13] &amp;quot;.227&amp;quot;          &amp;quot;3.6&amp;quot;           &amp;quot;10.3&amp;quot;          &amp;quot;.348&amp;quot;         
## [17] &amp;quot;2.2&amp;quot;           &amp;quot;3.1&amp;quot;           &amp;quot;.686&amp;quot;          &amp;quot;0.9&amp;quot;          
## [21] &amp;quot;4.0&amp;quot;           &amp;quot;4.8&amp;quot;           &amp;quot;2.4&amp;quot;           &amp;quot;1.4&amp;quot;          
## [25] &amp;quot;0.2&amp;quot;           &amp;quot;1.7&amp;quot;           &amp;quot;2.9&amp;quot;           &amp;quot;12.0&amp;quot;         
## [29] &amp;quot;Rk&amp;quot;            &amp;quot;Player&amp;quot;        &amp;quot;Pos&amp;quot;           &amp;quot;Age&amp;quot;          
## [33] &amp;quot;Tm&amp;quot;            &amp;quot;G&amp;quot;             &amp;quot;GS&amp;quot;            &amp;quot;MP&amp;quot;           
## [37] &amp;quot;FG&amp;quot;            &amp;quot;FGA&amp;quot;           &amp;quot;FG%&amp;quot;           &amp;quot;3P&amp;quot;           
## [41] &amp;quot;3PA&amp;quot;           &amp;quot;3P%&amp;quot;           &amp;quot;2P&amp;quot;            &amp;quot;2PA&amp;quot;          
## [45] &amp;quot;2P%&amp;quot;           &amp;quot;FT&amp;quot;            &amp;quot;FTA&amp;quot;           &amp;quot;FT%&amp;quot;          
## [49] &amp;quot;ORB&amp;quot;           &amp;quot;DRB&amp;quot;           &amp;quot;TRB&amp;quot;           &amp;quot;AST&amp;quot;          
## [53] &amp;quot;STL&amp;quot;           &amp;quot;BLK&amp;quot;           &amp;quot;TOV&amp;quot;           &amp;quot;PF&amp;quot;           
## [57] &amp;quot;PTS&amp;quot;           &amp;quot;21&amp;quot;            &amp;quot;Marvin Bagley&amp;quot; &amp;quot;PF&amp;quot;           
## [61] &amp;quot;20&amp;quot;            &amp;quot;SAC&amp;quot;           &amp;quot;8&amp;quot;             &amp;quot;2&amp;quot;            
## [65] &amp;quot;192&amp;quot;           &amp;quot;8.2&amp;quot;           &amp;quot;18.6&amp;quot;          &amp;quot;.444&amp;quot;         
## [69] &amp;quot;0.6&amp;quot;           &amp;quot;2.1&amp;quot;           &amp;quot;.273&amp;quot;          &amp;quot;7.7&amp;quot;          
## [73] &amp;quot;16.5&amp;quot;          &amp;quot;.466&amp;quot;          &amp;quot;2.6&amp;quot;           &amp;quot;3.4&amp;quot;          
## [77] &amp;quot;.778&amp;quot;          &amp;quot;3.4&amp;quot;           &amp;quot;7.5&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first instance of this &lt;code&gt;junk&lt;/code&gt; is indexed here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scraped_data[610: 638]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Rk&amp;quot;     &amp;quot;Player&amp;quot; &amp;quot;Pos&amp;quot;    &amp;quot;Age&amp;quot;    &amp;quot;Tm&amp;quot;     &amp;quot;G&amp;quot;      &amp;quot;GS&amp;quot;     &amp;quot;MP&amp;quot;    
##  [9] &amp;quot;FG&amp;quot;     &amp;quot;FGA&amp;quot;    &amp;quot;FG%&amp;quot;    &amp;quot;3P&amp;quot;     &amp;quot;3PA&amp;quot;    &amp;quot;3P%&amp;quot;    &amp;quot;2P&amp;quot;     &amp;quot;2PA&amp;quot;   
## [17] &amp;quot;2P%&amp;quot;    &amp;quot;FT&amp;quot;     &amp;quot;FTA&amp;quot;    &amp;quot;FT%&amp;quot;    &amp;quot;ORB&amp;quot;    &amp;quot;DRB&amp;quot;    &amp;quot;TRB&amp;quot;    &amp;quot;AST&amp;quot;   
## [25] &amp;quot;STL&amp;quot;    &amp;quot;BLK&amp;quot;    &amp;quot;TOV&amp;quot;    &amp;quot;PF&amp;quot;     &amp;quot;PTS&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second instance of this &lt;code&gt;junk&lt;/code&gt; is indexed here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scraped_data[1219: 1247]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Rk&amp;quot;     &amp;quot;Player&amp;quot; &amp;quot;Pos&amp;quot;    &amp;quot;Age&amp;quot;    &amp;quot;Tm&amp;quot;     &amp;quot;G&amp;quot;      &amp;quot;GS&amp;quot;     &amp;quot;MP&amp;quot;    
##  [9] &amp;quot;FG&amp;quot;     &amp;quot;FGA&amp;quot;    &amp;quot;FG%&amp;quot;    &amp;quot;3P&amp;quot;     &amp;quot;3PA&amp;quot;    &amp;quot;3P%&amp;quot;    &amp;quot;2P&amp;quot;     &amp;quot;2PA&amp;quot;   
## [17] &amp;quot;2P%&amp;quot;    &amp;quot;FT&amp;quot;     &amp;quot;FTA&amp;quot;    &amp;quot;FT%&amp;quot;    &amp;quot;ORB&amp;quot;    &amp;quot;DRB&amp;quot;    &amp;quot;TRB&amp;quot;    &amp;quot;AST&amp;quot;   
## [25] &amp;quot;STL&amp;quot;    &amp;quot;BLK&amp;quot;    &amp;quot;TOV&amp;quot;    &amp;quot;PF&amp;quot;     &amp;quot;PTS&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems like this junk repeats every 609th element (1219 - 610 = 609). To remove this junk, I’ll simply create a vector of indices that correspond to the junk we want removed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;to_remove &amp;lt;- 610:638
n &amp;lt;- length(scraped_data)

while(to_remove[length(to_remove)] &amp;lt;= n - 609 ){
  
  A &amp;lt;- to_remove[length(to_remove)] + 581
  #Note: 1219 - 638 = 581
  
  to_add &amp;lt;- A:(A+28)
  to_remove &amp;lt;- c(to_remove, to_add)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we remove all the junk as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;process_dat &amp;lt;- scraped_data[-to_remove]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can check that we have reduced our data vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n2 &amp;lt;- length(process_dat)
print(n2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13603&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Now we’ll get to work on filling in a data-frame with this cleaned data. The way I did it was to specify the elements that should be added row-wise to a data table in R. I.e. every 29 elements makes up one row in our table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_index &amp;lt;- seq(from = 30, to = n2-2, by = 29)
# Seems to be a glitch where the last 2 elements of scraped_data are not from the table we want to extract.

#Initialize data frame...
my_data &amp;lt;- data.frame(matrix(ncol = 29, nrow = 457))
# Note the dimensions here are found by looking at the table on basketball-
# reference.


# Loop to add each row to the data frame
for (i in 1:length(my_index)){
  current_ind &amp;lt;- my_index[i]
  my_data[i,] &amp;lt;- process_dat[current_ind:(current_ind+30)]
}


colnames(my_data) &amp;lt;- my_variable_names&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at what our table looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(my_data[1:5,], caption = &amp;quot;Our data&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:A101&#34;&gt;Table 1: &lt;/span&gt;Our data&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Rk&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Player&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Pos&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Age&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Tm&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;G&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;GS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;MP&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FG&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FGA&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FG%&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Threes_made&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Threes_attempted&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Threes_percent&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Twos_made&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Twos_attempted&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Twos_percent&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FTA&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FT%&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ORB&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;DRB&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;TRB&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;AST&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;STL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;BLK&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;TOV&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PTS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Steven Adams&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;716&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.624&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.627&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.486&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;15.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bam Adebayo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;22&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MIA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1023&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.565&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.111&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.579&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.685&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;11.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;16.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LaMarcus Aldridge&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;34&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SAS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;27&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;27&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;893&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.513&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.347&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;14.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.536&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.825&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nickeil Alexander-Walker&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NOP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;17.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.331&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;9.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.333&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.329&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.688&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;15.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Grayson Allen&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MEM&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;295&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;13.5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.441&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.393&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.491&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.842&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4.8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;16.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One last step required! All columns in my table are type &lt;code&gt;chr&lt;/code&gt;. We want to change the columns that are numeric into a numeric type!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(my_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    468 obs. of  29 variables:
##  $ Rk              : chr  &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; ...
##  $ Player          : chr  &amp;quot;Steven Adams&amp;quot; &amp;quot;Bam Adebayo&amp;quot; &amp;quot;LaMarcus Aldridge&amp;quot; &amp;quot;Nickeil Alexander-Walker&amp;quot; ...
##  $ Pos             : chr  &amp;quot;C&amp;quot; &amp;quot;C&amp;quot; &amp;quot;C&amp;quot; &amp;quot;SG&amp;quot; ...
##  $ Age             : chr  &amp;quot;26&amp;quot; &amp;quot;22&amp;quot; &amp;quot;34&amp;quot; &amp;quot;21&amp;quot; ...
##  $ Tm              : chr  &amp;quot;OKC&amp;quot; &amp;quot;MIA&amp;quot; &amp;quot;SAS&amp;quot; &amp;quot;NOP&amp;quot; ...
##  $ G               : chr  &amp;quot;26&amp;quot; &amp;quot;30&amp;quot; &amp;quot;27&amp;quot; &amp;quot;26&amp;quot; ...
##  $ GS              : chr  &amp;quot;26&amp;quot; &amp;quot;30&amp;quot; &amp;quot;27&amp;quot; &amp;quot;0&amp;quot; ...
##  $ MP              : chr  &amp;quot;716&amp;quot; &amp;quot;1023&amp;quot; &amp;quot;893&amp;quot; &amp;quot;337&amp;quot; ...
##  $ FG              : chr  &amp;quot;6.6&amp;quot; &amp;quot;6.1&amp;quot; &amp;quot;8.6&amp;quot; &amp;quot;5.7&amp;quot; ...
##  $ FGA             : chr  &amp;quot;10.6&amp;quot; &amp;quot;10.8&amp;quot; &amp;quot;16.7&amp;quot; &amp;quot;17.1&amp;quot; ...
##  $ FG%             : chr  &amp;quot;.624&amp;quot; &amp;quot;.565&amp;quot; &amp;quot;.513&amp;quot; &amp;quot;.331&amp;quot; ...
##  $ Threes_made     : chr  &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.7&amp;quot; &amp;quot;3.0&amp;quot; ...
##  $ Threes_attempted: chr  &amp;quot;0.1&amp;quot; &amp;quot;0.3&amp;quot; &amp;quot;2.0&amp;quot; &amp;quot;9.0&amp;quot; ...
##  $ Threes_percent  : chr  &amp;quot;.000&amp;quot; &amp;quot;.111&amp;quot; &amp;quot;.347&amp;quot; &amp;quot;.333&amp;quot; ...
##  $ Twos_made       : chr  &amp;quot;6.6&amp;quot; &amp;quot;6.1&amp;quot; &amp;quot;7.9&amp;quot; &amp;quot;2.7&amp;quot; ...
##  $ Twos_attempted  : chr  &amp;quot;10.5&amp;quot; &amp;quot;10.5&amp;quot; &amp;quot;14.8&amp;quot; &amp;quot;8.1&amp;quot; ...
##  $ Twos_percent    : chr  &amp;quot;.627&amp;quot; &amp;quot;.579&amp;quot; &amp;quot;.536&amp;quot; &amp;quot;.329&amp;quot; ...
##  $ FT              : chr  &amp;quot;1.8&amp;quot; &amp;quot;4.4&amp;quot; &amp;quot;3.2&amp;quot; &amp;quot;1.2&amp;quot; ...
##  $ FTA             : chr  &amp;quot;3.7&amp;quot; &amp;quot;6.4&amp;quot; &amp;quot;3.9&amp;quot; &amp;quot;1.7&amp;quot; ...
##  $ FT%             : chr  &amp;quot;.486&amp;quot; &amp;quot;.685&amp;quot; &amp;quot;.825&amp;quot; &amp;quot;.688&amp;quot; ...
##  $ ORB             : chr  &amp;quot;4.5&amp;quot; &amp;quot;2.7&amp;quot; &amp;quot;2.3&amp;quot; &amp;quot;0.4&amp;quot; ...
##  $ DRB             : chr  &amp;quot;8.4&amp;quot; &amp;quot;8.5&amp;quot; &amp;quot;5.7&amp;quot; &amp;quot;5.3&amp;quot; ...
##  $ TRB             : chr  &amp;quot;12.9&amp;quot; &amp;quot;11.2&amp;quot; &amp;quot;8.0&amp;quot; &amp;quot;5.8&amp;quot; ...
##  $ AST             : chr  &amp;quot;3.6&amp;quot; &amp;quot;4.9&amp;quot; &amp;quot;2.7&amp;quot; &amp;quot;4.9&amp;quot; ...
##  $ STL             : chr  &amp;quot;0.7&amp;quot; &amp;quot;1.6&amp;quot; &amp;quot;0.7&amp;quot; &amp;quot;1.0&amp;quot; ...
##  $ BLK             : chr  &amp;quot;1.6&amp;quot; &amp;quot;1.4&amp;quot; &amp;quot;2.1&amp;quot; &amp;quot;0.4&amp;quot; ...
##  $ TOV             : chr  &amp;quot;2.1&amp;quot; &amp;quot;3.1&amp;quot; &amp;quot;1.6&amp;quot; &amp;quot;2.8&amp;quot; ...
##  $ PF              : chr  &amp;quot;2.5&amp;quot; &amp;quot;2.9&amp;quot; &amp;quot;2.4&amp;quot; &amp;quot;3.2&amp;quot; ...
##  $ PTS             : chr  &amp;quot;15.0&amp;quot; &amp;quot;16.6&amp;quot; &amp;quot;21.1&amp;quot; &amp;quot;15.5&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_data[, c(4, 6:29)] &amp;lt;- sapply(my_data[, c(4,6:29)], as.numeric)
str(my_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    468 obs. of  29 variables:
##  $ Rk              : chr  &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; ...
##  $ Player          : chr  &amp;quot;Steven Adams&amp;quot; &amp;quot;Bam Adebayo&amp;quot; &amp;quot;LaMarcus Aldridge&amp;quot; &amp;quot;Nickeil Alexander-Walker&amp;quot; ...
##  $ Pos             : chr  &amp;quot;C&amp;quot; &amp;quot;C&amp;quot; &amp;quot;C&amp;quot; &amp;quot;SG&amp;quot; ...
##  $ Age             : num  26 22 34 21 24 21 27 29 26 31 ...
##  $ Tm              : chr  &amp;quot;OKC&amp;quot; &amp;quot;MIA&amp;quot; &amp;quot;SAS&amp;quot; &amp;quot;NOP&amp;quot; ...
##  $ G               : num  26 30 27 26 16 29 1 18 25 2 ...
##  $ GS              : num  26 30 27 0 0 26 0 2 1 0 ...
##  $ MP              : num  716 1023 893 337 295 ...
##  $ FG              : num  6.6 6.1 8.6 5.7 6 6.6 6.8 2.4 4.4 5.1 ...
##  $ FGA             : num  10.6 10.8 16.7 17.1 13.5 10 13.5 8.1 9.2 18 ...
##  $ FG%             : num  0.624 0.565 0.513 0.331 0.441 0.662 0.5 0.291 0.479 0.286 ...
##  $ Threes_made     : num  0 0 0.7 3 2.7 0 6.8 0.9 0.4 2.6 ...
##  $ Threes_attempted: num  0.1 0.3 2 9 6.8 0.1 9 3.4 1.6 12.9 ...
##  $ Threes_percent  : num  0 0.111 0.347 0.333 0.393 0 0.75 0.25 0.238 0.2 ...
##  $ Twos_made       : num  6.6 6.1 7.9 2.7 3.3 6.6 0 1.5 4 2.6 ...
##  $ Twos_attempted  : num  10.5 10.5 14.8 8.1 6.7 9.9 4.5 4.7 7.6 5.1 ...
##  $ Twos_percent    : num  0.627 0.579 0.536 0.329 0.491 0.668 0 0.32 0.531 0.5 ...
##  $ FT              : num  1.8 4.4 3.2 1.2 2 3.5 0 1.8 1.7 0 ...
##  $ FTA             : num  3.7 6.4 3.9 1.7 2.3 5.7 0 2.7 2.7 0 ...
##  $ FT%             : num  0.486 0.685 0.825 0.688 0.842 0.615 NA 0.655 0.629 NA ...
##  $ ORB             : num  4.5 2.7 2.3 0.4 0.2 4.9 0 2.3 1.9 0 ...
##  $ DRB             : num  8.4 8.5 5.7 5.3 4.8 9.4 0 6 6.1 18 ...
##  $ TRB             : num  12.9 11.2 8 5.8 5 14.3 0 8.2 8 18 ...
##  $ AST             : num  3.6 4.9 2.7 4.9 2.9 1.8 4.5 2 4.3 5.1 ...
##  $ STL             : num  0.7 1.6 0.7 1 0.6 1 2.3 1.7 1.3 2.6 ...
##  $ BLK             : num  1.6 1.4 2.1 0.4 0.1 1.9 0 0.8 1 0 ...
##  $ TOV             : num  2.1 3.1 1.6 2.8 2 1.6 2.3 1.6 1.9 2.6 ...
##  $ PF              : num  2.5 2.9 2.4 3.2 3.1 3.4 2.3 2.6 3.1 2.6 ...
##  $ PTS             : num  15 16.6 21.1 15.5 16.6 16.7 20.3 7.4 10.9 12.9 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! Now we’re done. The data is now saved into R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;illustration-using-the-data-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Illustration: Using the Data in R&lt;/h2&gt;
&lt;p&gt;To illustrate how we might use this data, I’ll go through an excercise of data manipulation. Currently on my Fantasy League, we have defined a metric that takes some weighted average of a player’s box scofe output. Using the data we’ve just compiled, I’ve gone ahead and calculated this metric to see which players perform fantasy league-wise per 36 minutes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_data &amp;lt;- as_tibble(my_data)
#I like tibbles over data frames

#Compute new column of Fantasy points
my_data &amp;lt;- my_data %&amp;gt;%
  mutate(FP = - 0.5*FGA + 
           0.75*Threes_made + PTS +
           1.5*ORB + DRB + 1.5*AST +
           2.5*STL + 2.5*BLK - TOV)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Which players add most fantasy point value? 
FP_data &amp;lt;- my_data %&amp;gt;%
  select(Player, Tm, FP,G) %&amp;gt;%
  filter(G &amp;gt; 5) %&amp;gt;%
  arrange(desc(FP))

knitr::kable(FP_data[1:10,], caption = &amp;quot;Fantasy Data&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:A122&#34;&gt;Table 2: &lt;/span&gt;Fantasy Data&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Player&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Tm&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;FP&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;G&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Giannis Antetokounmpo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MIL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Luka Dončić&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DAL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chimezie Metu&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SAS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.850&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;James Harden&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HOU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.125&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Karl-Anthony Towns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Joel Embiid&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PHI&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Anthony Davis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LAL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.125&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;LeBron James&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LAL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.125&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Andre Drummond&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DET&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.750&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Hassan Whiteside&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POR&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.350&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
